#! /usr/bin/env python
#-*- coding: utf-8 -*-

# 整合git跟reviewboard，整合git与svnx，使得不用修改svn hook就能够按照原来的方式提交代码
# 整合跟svn:externals有关的一些脚本:
# .git-svn-clone-externals 在git-svn分支上取得所有的svn:externals CLONE到.git_externals目录并且做好相应的符号链接到正确目录
# .git-svn-branch 创建包含externals的在内的分支
# .git-svn-delete-branch 删除分支，也同时删除externals下的分支
# .git-svn-externals-check 检测externals是否有未comit或者未push到svn服务器的内容
# .git-svn-externals-update 更新所有的externals到SVN最新版本
# .git-svn-merge-branch merge包含externals在内的branch到当前working branch
# .git-svn-switch-branch 切换包含externals在内到分支
# .git-svn-update-all 更新所有的内容到SVN最新版本
# pr post review到review board
# ci commit改变到svn仓库

#

import os
import sys
import time
import argparse
import inspect
import commands
import tempfile
import random
import atexit

try:
	import argcomplete
except:
	class argcomplete(object):
		@classmethod
		def autocomplete(*args):
			pass

EXTERNALS_DIR_NAME = ".git_externals"

FOREGROUND_RED = "\033[31m" # text color contains red.
ENDC = '\033[0m'

_called_before_exit = False
_before_exit = None

def CallBeforeExit():
	global _called_before_exit
	if _before_exit is None:
		return
	if _called_before_exit:
		return
	_before_exit()
	_called_before_exit = True

def exit(code):
	CallBeforeExit()
	sys.exit(code)

def SetBeforeExitFunc(func):
	global _before_exit
	_before_exit = func

def DoCommandStatusOutput(command, *except_codes):
	exit_code, output = commands.getstatusoutput(command)
	if exit_code != 0 and exit_code not in except_codes:
		sys.stdout.write(output)
		sys.stderr.write((FOREGROUND_RED + "Exit because '%s' failed,code:%s\n" + ENDC) % (command, exit_code))
		exit(exit_code)
	return exit_code, output

def DoCommandOutput(command, *except_codes):
	return DoCommandStatusOutput(command, *except_codes)[1]

def DoCommand(command, *except_codes):
	exit_code = os.system(command)
	if exit_code != 0 and exit_code not in except_codes:
		sys.stderr.write((FOREGROUND_RED + "Exit because '%s' failed,code:%s\n" + ENDC) % (command, exit_code))
		exit(exit_code)
	return exit_code

def DoCommands(*args):
	exit_code = 0
	for command in args:
		exit_code = DoCommand(command)
	return exit_code

# 得到路径对应的git根目录
def GetCurGitDir(path):
	git_dir = ".git"
	abspath = os.path.abspath(path)
	cur_path = abspath
	while True:
		if cur_path == "/":
			break
		git_dir_path = os.path.join(cur_path, git_dir)
		if os.path.exists(git_dir_path):
			return cur_path
		cur_path = os.path.abspath(os.path.join(cur_path, os.pardir))
	return None

def GetGitRootDir():
	externals_dir = os.getcwd()
	while os.path.exists(externals_dir):
		name = os.path.join(externals_dir, EXTERNALS_DIR_NAME)
		if os.path.exists(name) and os.path.isdir(name):
			break
		externals_dir = os.path.join(externals_dir, os.path.pardir)
	if not os.path.exists(externals_dir):
		raise RuntimeError("Can't find git externals directory")
	externals_dir = os.path.abspath(externals_dir)
	return externals_dir

def ChdirGitRoot():
	path = GetGitRootDir()
	os.chdir(path)

def _DoFunc(func, gitdir):
	oldcwd = os.getcwd()
	os.chdir(os.path.join(gitdir, os.path.pardir))
	try:
		func()
	finally:
		os.chdir(oldcwd)

def ForEachExternal(func):
	cwd = os.getcwd()
	externals_dir = os.path.join(GetGitRootDir(), EXTERNALS_DIR_NAME)
	os.chdir(externals_dir)
	try:
		gitdirs = commands.getoutput("find * -type d -name .git")
		for gitdir in gitdirs.split("\n"):
			if not os.path.isdir(gitdir):
				continue
			_DoFunc(func, gitdir)
	finally:
		os.chdir(cwd)

def AddArgumentWithIPythonCompleter(parser, *args, **kwargs):
	action = parser.add_argument(*args, **kwargs)
	try:
		import IPython
	except ImportError:
		return
	action.completer = IPython.core.completer.Completer()

def GetGitRootPathAndRaPath(path):
	git_root_path = GetCurGitDir(path)
	if git_root_path is None:
		return None, None
	ra_path = os.path.abspath(path).replace(git_root_path, "")
	if len(ra_path) > 0 and ra_path[0] == os.path.sep:
		ra_path = ra_path[1:]
	return git_root_path, ra_path

def GetCurBranchName(git_root_path):
	if git_root_path is None:
		return ""
	name = DoCommandOutput("git symbolic-ref HEAD 2>/dev/null")
	return name.replace("refs/heads/", "", 1)

def IsPathExists(path):
	if os.path.exists(path):
		return True
	git_root_path, ra_path = GetGitRootPathAndRaPath(path)
	if git_root_path is None:
		return False
	cwd = os.getcwd()
	os.chdir(git_root_path)
	try:
		branch_name = GetCurBranchName(git_root_path)
		code, _ = commands.getstatusoutput("git cat-file -e %s:%s" % (branch_name, ra_path))
		return code == 0
	finally:
		os.chdir(cwd)

def DoCommandInProperPath(command, path, get_path_fail_func = None):
	git_root_path, ra_path = GetGitRootPathAndRaPath(path)
	if git_root_path is None:
		return
	cwd = os.getcwd()
	os.chdir(git_root_path)
	try:
		return command(ra_path)
	finally:
		os.chdir(cwd)

def JoinArgs(args):
	args = map(lambda arg : arg if " " not in arg else '"%s"' % arg, args)
	return " ".join(args)

class GitxCommand(object):
	@classmethod
	def get_command_name(cls):
		raise RuntimeError

	@classmethod
	def get_description(cls):
		return ""

	@classmethod
	def parse_args(cls, parser):
		pass

	def __init__(self, options, remain_args):
		self.options = options
		self.remain_args_list = remain_args
		self.remain_args = JoinArgs(remain_args)

	def run(self):
		return 1

	def do_command_with_external_paths(self, command, nopath_command):
		if self.remain_args == "":
			return nopath_command()
		paths = [arg for arg in self.remain_args_list if IsPathExists(arg)]
		if len(paths) == 0:
			return nopath_command()
		# 转换为SET会不会丢掉一些重复的函数？
		other_args = JoinArgs(list(set(self.remain_args_list) - set(paths)))
		for path in paths:
			DoCommandInProperPath(
					lambda ra_path : command(ra_path, other_args),
					path,)
		return 0

class Clone(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "clone"

	@classmethod
	def get_description(cls):
		return "clone svn and externals"

	@classmethod
	def parse_args(cls, parser):
		parser.add_argument("url")
		parser.add_argument("name", nargs="?", default="")

	def get_last_version(self, url):
		return commands.getoutput(
				"svn log -l 2 %s| grep ^r | awk '{print $1}' | sed -n '2,2p' | sed 's/^r//'" % url)

	def run(self):
		url = self.options.url
		if self.options.name != "":
			name = self.options.name
		else:
			splits = url.split("/")
			if len(splits) == 0:
				sys.stderr.write("url %s is not valid\n" % url)
				exit(1)
			name = splits[-1]
		if "-r" not in self.remain_args:
			version = "-r %s:HEAD" % self.get_last_version(url)
		command = "git svn clone %s %s %s %s" % (url, name, self.remain_args, version)
		return DoCommands(command, "cd %s;git-svn-clone-externals" % name)

class CloneExternals(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "clonee"

	@classmethod
	def get_description(cls):
		return "clone externals into .git_externals and link them to proper path"

	def run(self):
		return os.system("git-svn-clone-externals")

class CreateBranch(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "create_branch"

	@classmethod
	def get_description(cls):
		return "create git branch including externals"

	@classmethod
	def parse_args(cls, parser):
		parser.add_argument("branch_name")
		parser.add_argument("-n", "-noswitch", action = "store_true", default = False,
				help = "do not switch to new branch after create")

	def run(self):
		exit_code = os.system("git-svn-branch %s" % self.options.branch_name)
		if exit_code != 0:
			return exit_code
		if self.options.n:
			return 0
		return os.system("git-svn-switch-branch " + self.options.branch_name)

class DeleteBranch(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "delete_branch"

	@classmethod
	def get_description(cls):
		return "delete branch including externals"

	@classmethod
	def parse_args(cls, parser):
		parser.add_argument("branch_name")
		parser.add_argument("-D", action = "store_true", default = False,
				help = "force delete branch")

	def run(self):
		extra = ""
		if self.options.D:
			extra = "-D"
		return os.system("git-svn-delete-branch %s %s" % (self.options.branch_name, extra))

class CheckExternals(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "check_externals"

	@classmethod
	def get_description(cls):
		return "check externals uncommitted or unpushed changes"

	def run(self):
		return os.system("git-svn-externals-check")

class UpdateExternals(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "update_externals"

	@classmethod
	def get_description(cls):
		return "update externals"

	def run(self):
		return os.system("git-svn-externals-update")

class Merge(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "merge"

	@classmethod
	def get_description(cls):
		return "merge branch to this working tree with externals"

	@classmethod
	def parse_args(cls, parser):
		parser.add_argument("branch_name")

	def run(self):
		return os.system("git-svn-merge-branch %s" % self.options.branch_name)

class SwitchBranch(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "switch_branch"

	@classmethod
	def get_description(cls):
		return "switch branch to with externals"

	@classmethod
	def parse_args(cls, parser):
		parser.add_argument("branch_name")

	def run(self):
		return os.system("git-svn-switch-branch %s" % self.options.branch_name)

class Update(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "update"

	@classmethod
	def get_description(cls):
		return "update to svn HEAD"

	def run(self):
		return DoCommand("git-svn-update-all")

class UpdateX(Update):
	@classmethod
	def get_command_name(cls):
		return "ux"

	def run(self):
		cur_time = str(int(time.time()))
		ran = str(random.randint(0, 10000000))
		name = "_".join(("updatex", cur_time, ran))
		DoStashWithName(self, name)
		def func():
			StashPopWithName(name)
		SetBeforeExitFunc(func)
		return super(UpdateX, self).run()

class ShowBranch(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "show_branch"

	@classmethod
	def get_description(cls):
		return "show branch include externals"

	def run(self):
		return os.system("git-svn-show-branch")

class PostReview(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "pr"

	@classmethod
	def get_description(cls):
		return "post changes against svn to review board"

	@classmethod
	def parse_args(cls, parser):
		parser.add_argument("change_name")

	def run(self):
		self.first_try = True
		ChdirGitRoot()
		DoCommand("git status -s")
		stash_name = "postreview_" + str(time.time())
		SetBeforeExitFunc(lambda : StashPopWithName(stash_name, True))
		DoStashWithName(self, stash_name)
		self.do()

	def get_versions(self):
		lines = DoCommandOutput("git svn dcommit --dry-run").split("\n")
		vers = [line for line in lines if line.startswith("diff-tree")]
		return vers

	def do(self):
		vers = self.get_versions()
		if len(vers) == 0:
			sys.stdout.write("No commit need push to svn\n")
			return 0
		if len(vers) > 1 and self.first_try:
			return self.try_auto_squash()
		return self.do_pr(vers[0])

	def try_auto_squash(self):
		ans = raw_input("There are more than one commits unpushed to svn, auto squash them together?[(Y)es/(N)o/(I)nputLog/(L)astLog]")
		ans = ans.lower()
		if ans == "y":
			self.auto_squash()
			self.do()
			return 0
		elif ans == "i":
			log = raw_input("Please input log:")
			self._squash_with_log(log)
			return 0
		elif ans == "l":
			vers = self.get_versions()
			if len(vers) == 0:
				return 1
			last_version_after_commit = vers[0].replace("diff-tree", "")
			log = DoCommandOutput("git log -1 --pretty=format:'%s' " + last_version_after_commit)
			self._squash_with_log(log)
			return 0
		sys.stderr.write("if you want to solve this manually,"
				"run %s'git rebase git-svn -i'%s and squash all unpushed commits to single one.\n" % (FOREGROUND_RED, ENDC))
		return 1

	def _squash_with_log(self, log):
		self.auto_squash()
		DoCommand("git commit --amend -m '%s'" % log)
		self.do()

	def get_last_log(self):
		return DoCommandOutput('git log -1 --pretty=format:"%s"')

	def do_pr(self, ver_line):
		_tag, last_ver, ver = ver_line.split()
		file_lists = DoCommandOutput("git diff %s %s --name-status" % (last_ver, ver))
		output = DoCommandOutput("git svn info")
		url, resp_root = None, None
		url_tag = "URL:"
		root_tag = "Repository Root:"
		for line in output.split("\n"):
			if line.startswith(url_tag):
				url = line.replace(url_tag, "", 1).strip()
			if line.startswith(root_tag):
				resp_root = line.replace(root_tag, "", 1).strip()
		if url is None or resp_root is None:
			sys.stderr.write("Can't find svn url info\n")
			return 1
		relative_path = url.replace(resp_root, "", 1)
		tmp_file = tempfile.NamedTemporaryFile(delete = False)
		tmp_file.write(file_lists + "\n")
		tmp_file.close()
		log = self.get_last_log()
		command = "svnx pr %s -l %s -r %s -m '%s'" % (
			self.options.change_name,
			tmp_file.name,
			relative_path, log)
		command += " " + self.remain_args
		DoCommand(command)
		return 0

	def auto_squash(self):
		DoCommand("git config --global core.editor git-svn-squash-editor")
		DoCommand("git rebase git-svn -i")
		DoCommand("git config --global core.editor vim")
		self.first_try = False

class Ci(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "ci"

	@classmethod
	def get_description(cls):
		return "ci commited changes to svn"

	@classmethod
	def parse_args(cls, parser):
		parser.add_argument("change_name")

	def run(self):
		version = "HEAD"
		if len(self.remain_args) != 0:
			version = self.remain_args
		stash_name = "commit_" + str(time.time())
		SetBeforeExitFunc(lambda : StashPopWithName(stash_name, True))
		DoStashWithName(self, stash_name)
		return DoCommands(
				"svnx ci -f " + self.options.change_name,
				"git svn dcommit %s %s" % (version, self.options.change_name),
				"git-svn-externals-check")

class Checkout(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "checkout"

	@classmethod
	def get_description(cls):
		return "git checkout with doing right with externals"

	def run(self):
		return self.do_command_with_external_paths(
				lambda ra_path, other_args : DoCommand("git checkout %s %s" % (other_args, ra_path)),
				lambda : DoCommand("git checkout %s" % self.remain_args))

class Status(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "st"

	@classmethod
	def get_description(cls):
		return "git status with check externals status and unpushed content"

	def run(self):
		return DoCommands("git status", "git-svn-check-unpushed", "git-svn-externals-check")

def DoStashWithName(self, stash_name):
	ChdirGitRoot()
	commands.getoutput("git stash save %s %s " % (stash_name, self.remain_args))
	def func():
		commands.getoutput("git stash save %s %s " % (stash_name, self.remain_args))
	ForEachExternal(func)

def StashPopWithName(stash_name, is_silent = False):
	ChdirGitRoot()
	def func():
		# do not exit when error occured
		output = commands.getoutput("git stash list")
		outputs = output.split("\n")
		if len(outputs) == 0:
			return
		if stash_name not in outputs[0]:
			return
		command = "git stash pop"
		if is_silent:
			command += " >/dev/null"
		ret_code = os.system(command)
		if ret_code == 0:
			return
		os.system("git stash drop")

	func()
	ForEachExternal(func)

class Stash(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "stash"

	@classmethod
	def get_description(cls):
		return "git do stash with externals"

	def run(self):
		ChdirGitRoot()
		DoCommand("git stash " + self.remain_args, 256)
		def func():
			DoCommand("git stash " + self.remain_args, 256)
		ForEachExternal(func)
		return 0

class Diff(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "diff"

	@classmethod
	def get_description(cls):
		return "diff"

	@classmethod
	def parse_args(cls, parser):
		parser.add_argument("-na", action = "store_true", default = False,
				help = "do not show git diff with externals")

	def run(self):
		return self.do_command_with_external_paths(
					lambda ra_path, other_args : DoCommand("git diff %s %s" % (other_args, ra_path)),
					lambda : self.do_diff_global())

	def do_diff_global(self):
		DoCommand("git diff " + self.remain_args)
		if self.options.na:
			return 0
		def func():
			command = "git diff " + self.remain_args
			DoCommand(command)
		ForEachExternal(func)
		return 0

class Info(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "info"

	@classmethod
	def get_description(cls):
		return "show git svn info"

	@classmethod
	def parse_args(cls, parser):
		parser.add_argument("-na", action = "store_true", default = False,
				help = "do not show git svn info with externals")

	def run(self):
		DoCommand("git svn info " + self.remain_args)
		if self.options.na:
			return
		ForEachExternal(lambda : DoCommand("git svn info " + self.remain_args))

class Add(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "add"

	@classmethod
	def get_description(cls):
		return "add file contents to index"

	def run(self):
		return self.do_command_with_external_paths(
				lambda ra_path, other_args : DoCommand("git add %s %s" % (other_args, ra_path)),
				lambda : DoCommand("git add %s" % self.remain_args))

class Reset(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "reset"

	@classmethod
	def get_description(cls):
		return "Reset current HEAD to the specified state"

	def run(self):
		return self.do_command_with_external_paths(
					lambda ra_path, other_args : DoCommand("git reset %s %s" % (other_args, ra_path)),
					lambda : DoCommand("git reset " + self.remain_args))

class Rm(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "rm"

	@classmethod
	def get_description(cls):
		return "Remove files from the working tree and from the index"

	def run(self):
		return self.do_command_with_external_paths(
				lambda ra_path, other_args : DoCommand("git rm %s %s" % (other_args, ra_path)),
				lambda : DoCommand("git rm %s" % self.remain_args))

class Commit(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "commit"

	@classmethod
	def get_description(cls):
		return "Record changes to the repository"

	def run(self):
		return self.do_command_with_external_paths(
				lambda ra_path, other_args: DoCommand("git commit %s %s" % (other_args, ra_path)),
				self.do_commit_global)

	def do_commit_global(self):
		ChdirGitRoot()
		DoCommand("git commit " + self.remain_args, 256)
		ForEachExternal(lambda : DoCommand("git commit " + self.remain_args, 256))

class ExternalCommit(GitxCommand):
	name2path = {
			"share" : "logic/share",
			"staticdata" : "logic/setting/staticdata",
			"res" : "logic/setting/res",
	}
	@classmethod
	def get_command_name(cls):
		return "ecommit"

	@classmethod
	def get_description(cls):
		return "Commit externals(%s) to svn" % (",".join(cls.name2path.keys()))

	@classmethod
	def parse_args(cls, parser):
		pass

	def run(self):
		ChdirGitRoot()
		for name, path in self.name2path.iteritems():
			if not name in self.remain_args_list:
				continue
			DoCommandInProperPath(
					lambda ra_path : DoCommand("git svn dcommit"),
					path,)

class Log(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "log"

	@classmethod
	def get_description(cls):
		return "show log"

	def run(self):
		return self.do_command_with_external_paths(
				lambda ra_path, other_args : DoCommand("git log %s %s" % (other_args, ra_path), 13),
				lambda : DoCommand("git log " + self.remain_args, 13))

class Version(GitxCommand):
	@classmethod
	def get_command_name(cls):
		return "version"

	@classmethod
	def get_description(cls):
		return "git version of gitx"

	def run(self):
		dir_path = os.path.dirname(sys.argv[0])
		with open(os.path.join(dir_path, "version"), "r") as f:
			ver = f.read()
			if not ver.endswith("\n"):
				ver += "\n"
			sys.stdout.write(ver)

def add_command(subparsers, command_cls):
	cname = command_cls.get_command_name()
	desc = command_cls.get_description()
	command_parser = subparsers.add_parser(cname, help = desc)
	command_cls.parse_args(command_parser)
	command_parser.set_defaults(command_cls = command_cls)

def register_all_command(parser):
	mod = sys.modules[__name__]
	subparsers = parser.add_subparsers(help = "sub command helps")
	for obj_name in dir(mod):
		obj = getattr(mod, obj_name)
		if not inspect.isclass(obj) or not issubclass(obj, GitxCommand):
			continue
		if obj is GitxCommand:
			continue
		add_command(subparsers, obj)

def main():
	atexit.register(CallBeforeExit)
	parser = argparse.ArgumentParser()
	register_all_command(parser)
	argcomplete.autocomplete(parser)
	parse_result, remain_args = parser.parse_known_args()
	command = parse_result.command_cls(parse_result, remain_args)
	return command.run()

if __name__ == "__main__":
	try:
		exit(main())
	except:
		raise
	finally:
		if _before_exit is not None:
			_before_exit()

